services:

#################################################################
  minio:
    image: minio/minio:RELEASE.2024-06-13T22-53-53Z.fips
    environment:
      MINIO_ACCESS_KEY: access_key
      MINIO_SECRET_KEY: secret_key
    ports:
      - "9000:9000"
    volumes:
      - example_data:/data
    command: server /data




#################################################################
  postgres:
    image: postgis/postgis:16-3.4
    container_name: sql-agg
    restart: always
    ports:
      - 5432:5432
    volumes:
      - example_data:/var/lib/postgresql/data
      - example_data:/var/lib/postgresql/logs
      - example_data:/var/lib/postgresql/backups

    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: agg


#################################################################
  mongodb:
    image: mongo:5
    command: --replSet rs0
    ports:
      - '27017:27017'
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/admin --quiet
      interval: 2s
      timeout: 3s
      retries: 5
    volumes:
      - example_data:/data/db
    environment:
      # MONGO_INITDB_ROOT_USERNAME: my_admin
      # MONGO_INITDB_ROOT_PASSWORD: my_password
      MONGO_INITDB_DATABASE: messages

  mongo-init:
    image: mongo:5
    restart: "no"
    depends_on:
      mongodb:
        condition: service_healthy
    command: >
      mongosh --host mongodb:27017 --eval
      '
      rs.initiate( {
        _id : "rs0",
        members: [
          { _id: 0, host: "localhost:27017" }
        ]
      })
      '
    volumes:
      - example_data:/data/db

###############################################
  redis:
    image: redis:7.2.1
    container_name: redis
    restart: always
    ports:
      - 6379:6379
    volumes:
      - example_data:/data
    # environment:
    #   REDIS_PASSWORD: yourpassword

###########################################
  example:
    image: example_image
    container_name: example_image
    build:
      context: .
    depends_on:
      - redis
      - postgres
      - minio
      - mongodb
    command: sh -c "alembic upgrade head && gunicorn src.main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind=0.0.0.0:8000"

    ports:
      - 9009:8000

############################################
  celery:
      image: example_image
      build:
        context: .
      container_name: example_celery

      command: sh -c "celery --app=src.tasks.celery_init:celery_app worker -l INFO"
      depends_on:
        - redis

  celery_beat:
    image: example_image
    build:
      context: .
    container_name: example_celery_beat
    command: sh -c "celery --app=src.tasks.celery_init:celery_app worker -l INFO -B"
    depends_on:
      - redis

  flower:
    image: example_image
    build:
      context: .
    container_name: example_flower
    command: sh -c "celery --app=src.tasks.celery_init:celery_app flower"
    #command: sh -c "celery --app=src.tasks.celery_init:celery_app flower --url_prefix=/flower"

    depends_on:
      - redis
    ports:
      - 5555:5555

volumes:
  example_data: